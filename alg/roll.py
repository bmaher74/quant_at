#!/usr/bin/env python
#
# Written by:
# -- 
# John L. Weatherwax                2007-07-05
# 
# email: wax@alum.mit.edu
# 
# Please send comments and especially bug reports to the
# above email address.
# 
#-----

import numpy; from numpy import nan, asarray, isfinite, sqrt

import auto; from auto import Autocovariance

class RollModel(object):
    """
    Estimates the parameters c and \sigma_u^2 in Roll's model of price movement:

    m_t = m_{t-1} + u_t

    p_t = m_t + c q_t

    See the Hasbrouck Text Chapter 3: The Roll Model of Trade Prices ~ page 29
    """

    def __init__(self):
        self.lastPrice = nan
        self.ac = Autocovariance(N=1)

    def addSample(self,currentPrice):
        """
        Adds a sample of Delta P to the underlying autocovariance class
        """
        
        if isfinite(self.lastPrice) :
            deltaPrice = currentPrice - self.lastPrice
            self.ac.addSample( deltaPrice )

        self.lastPrice = currentPrice

    def get_c(self):
        """
        Returns an estimate of c the "half spread" c in the timeseries model: p_t = m_t + c q_t

        Here p_t is the trade price, m_t is the midquote (or fair price),
        q_t is a trade indicator +1 for buys and -1 for sells and c is one half of the bid-ask spread in dollars
        """

        gamma_1 = self.ac.gamma_k()[1]
        return sqrt( -gamma_1 ) 
    
    def get_sigmau2(self):
        """
        Returns an estimate of \sigma_u^2 the volatility of the u_t term in the arithmetic moving average
        for the fair price m_t given by

        m_t = m_{t-1} + u_t

        then u_t \sim N(0,\sigma_u^2)
        """

        gamma_k = self.ac.gamma_k()
        gamma_0,gamma_1 = gamma_k[0],gamma_k[1]
        return gamma_0 + 2 * gamma_1 
    

def main():
    
    # adjusted closing prices for IBM:
    ts_sim = asarray( [ 207.77, 205.48, 205.49, 204.69, 204.25, 205.72, 206.01,
    206, 204.72, 203.78, 201, 200.62, 199.81, 197.77, 197.26, 200.66, 198.81,
    197.53, 196.73, 197.98, 197.53, 197.76, 197.61, 193.87, 193.39, 193.42,
    193.02, 192.25, 192.22, 192.62, 192.42, 193.13, 192.95, 192.6, 192.07,
    192.89, 190.79, 191.87, 191.85, 191.75, 189.72, 190.24, 190.99, 191.19,
    189.24, 187.79, 179.82, 180.37, 179.3, 178.47, 179.85, 181.61, 180.61,
    180.89, 181.83, 183.94, 184.82, 185.58, 183.17, 185.46, 183.28, 184.23,
    184.03, 181.33, 180.77, 186.51, 182.18, 182.86, 186.75, 187.99, 190.41,
    191.43, 193.81, 190.84, 193.3, 192.19, 190.1, 188.92, 188.72, 187.27,
    180.24, 181.5, 176.37, 177.26, 180.61, 180.78, 184.52, 185.01, 185.9,
    188.02, 186.62, 186.65, 182.64, 181.53, 186.52, 185.85, 184.91, 185.83,
    182.47, 179.92, 183.18, 185.98, 184.42, 180.54, 178.94, 180.82, 180.2,
    175.86, 175.99, 177.49, 185.12, 189.03, 185.35, 184.66, 183.54, 185.15,
    180.96, 180.26, 175.46, 173.37, 171.93, 173.49, 177.76, 176.15, 176.31,
    173.14, 168.01, 167.29, 171.66, 173.35, 171.77, 171.63, 168.75, 165.92,
    162.14, 161.14, 160.1, 163.95, 165.99, 163.81, 165.67, 168.99, 170.56,
    171.15, 171.26, 167.81, 164.28, 165.45, 163.03, 157.73, 156.3, 162.54,
    170.13, 169.89, 171.63, 166.88, 165.42, 161.26, 169.27, 164.91, 170.88,
    169.39, 176.65, 175.88, 178.55, 179.64, 179.59, 179.14, 180.7, 181.46,
    182.93, 182.65, 181.42, 182.96, 173.15, 173.4, 172.11, 172.2, 171.93,
    172.86, 174.34, 174.33, 175.55, 173.3, 172.42, 169.46, 168.46, 167.94,
    165.58, 163.06, 164.1, 163.66, 164.2, 163.01, 162.44, 160.69, 160.35,
    162.12, 161.18, 161.19, 162.83, 162.34, 161.7, 162.75, 163.04, 164.07,
    164.53, 166.87, 165.46, 165.15, 165.71, 165.95, 166.21, 168.09, 168.51,
    168.37, 168.43, 166.81, 167.85, 170.14, 167.44, 168.31, 167.04, 166.83,
    165.67, 167.79, 170.01, 169.3, 167.75, 167.95, 167.55, 165.7, 164.89,
    165.49, 162.02, 162.66, 163.19, 163.46, 162.24, 161.23, 160.55, 161.23,
    161.33, 161.66, 161.32, 161.27, 161.53, 161.55, 160.37, 160.89, 160.18,
    158.7, 159.49, 157.39, 156.89, 155.38, 155.07, 153.31, 151.63, 150.47,
    156.39, 158.72, 159.74, 159.34, 163.11, 159.59, 157.28, 159.15, 160.77,
    157.51, 157.32, 159.2, 159.59, 158.11, 157.53, 159.27, 162.11, 161.52,
    160.69, 160.14, 160.52, 161.14, 161.37, 161.92, 163.3, 161.45, 160.65,
    160.19, 159.96, 160.22, 158.69, 155.95, 157.78, 157.75, 158.14, 156.37,
    152.32, 152.61, 152.51, 147.57, 146.93, 145.78, 146.05, 144.27, 144.62,
    144.91, 145.62, 144.04, 144.62, 144.46, 143.76, 143.67, 143.52, 142.73,
    142.37, 142.91, 142.97, 142.76, 141.56, 142.04, 141.59, 141.76, 142.84,
    141.33, 141.86, 141.35, 142.02, 141.08, 142.03, 142.41, 142.21, 141.46,
    138.57, 139.97, 140.96, 142.83, 140.25, 142.42, 142.08, 141.41, 139.05,
    139.33, 140.7, 140.8, 142.46, 143.55, 143.15, 143.47, 143.28, 143.15, 140.6,
    140.28, 139.77, 140.04, 137.41, 137.93, 137.18, 136.37, 136.21, 136.37,
    135.62, 134.61, 139.29, 137.56, 137.99, 136.89, 136.38, 136.2, 135.41,
    135.28, 134.42, 134.25, 131.9, 132.28, 130.82, 132.12, 131.55, 131.31,
    130.79, 128.41, 129.29, 128.71, 128.52, 126.96, 126.46, 126.22, 125.66,
    126.4, 124.82, 123.23, 122.96, 122.83, 124.42, 121.94, 122.65, 120.08,
    120.34, 121.64, 119.74, 122.17, 121.81, 123.34, 124.34, 125.71, 126.18,
    125.27, 124.6, 124.7, 125.12, 126.61, 128.57, 128.73, 126.92, 127.93,
    127.39, 126.51, 126.89, 124.6, 124.23, 124.63, 124.82, 124.61, 124.58,
    123.7, 121.56, 122.81, 125.95, 124.24, 126.85, 126.85, 126.62, 124.86,
    124.17, 124.18, 123.24, 119.81, 118.25, 118.94, 119.83, 121.39, 125.16,
    123.36, 124.4, 126.26, 125.47, 126.78, 126.3, 127.1, 126.49, 125.95, 124.7,
    124.65, 123.9, 120.23, 120.06, 120.46, 121.57, 124.17, 123.64, 120.66,
    121.55, 122.65, 119.58, 120.84, 120.77, 121.71, 120.14, 125.05, 126.11,
    126.58, 127.31, 127.59, 128.75, 123.14, 122.53, 118.49, 120.25, 123.06 ] )
    ts_sim = ts_sim[::-1] # flip the order of the data (process the data from oldest price to newest price)

    rm = RollModel()
    for samp in ts_sim:
        rm.addSample( samp )
    print "uncertainty in measured fair (closing) price= ", 2*rm.get_c()
    print "uncertainty in fair price (overnight move) dynamics= ", rm.get_sigmau2()

if __name__ == "__main__":
    main()
    
